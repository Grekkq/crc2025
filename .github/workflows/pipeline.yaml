name: GitHub Actions CRC Demo
run-name: Publish new version of "${{ github.ref_name }} by @${{ github.actor }}"
on:
  # this will ignore all pushes to tags, but will trigger on every new commit
  # https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#onpushbranchestagsbranches-ignoretags-ignore
  push:
    tags-ignore:
      - '**'
    branches:
      - "**"

jobs:
  calculate-tag:
    runs-on: ubuntu-latest
    outputs:
      full_sem_ver: ${{ steps.export_version.outputs.full_sem_ver }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full git history is fetched
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.1.11
        with:
          versionSpec: "6.0.5"
      - name: Determine Version
        id: version_step # step id used as reference for output values
        uses: gittools/actions/gitversion/execute@v3.1.11
      - name: Export calculate version as output
        id: export_version
        run: echo "full_sem_ver=v${{ steps.version_step.outputs.FullSemVer }}" >> "$GITHUB_OUTPUT"
  Run-Unit-Tests:
    runs-on: ubuntu-latest
    steps:
      # figure out how to clone the repo in pipeline runner
      - name: Check out repository code
        uses: actions/checkout@v4
      # figure out how to install python in required version
      - name: Set up Python 3.11.5
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.5"
      # figure out how to install requirements for our project
      - run: python -m pip install -r requirements.txt
      # figure out how to run tests to see if the server works
      - run: python -m unittest -v
  publish-new-release:
    permissions:
      contents: write
    needs: ["calculate-tag", "Run-Unit-Tests"]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Create new tag
        env:
          OUTPUT1: ${{needs.calculate-tag.outputs.full_sem_ver}}
        run: |
          echo "${{ needs.calculate-tag.outputs.full_sem_ver }}"
          echo "$OUTPUT1"
          new_tag=v${{ needs.calculate-tag.outputs.full_sem_ver }}
          git tag $new_tag
          git push origin $new_tag
      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ needs.calculate-tag.outputs.full_sem_ver }}
          release_name: Release ${{ needs.calculate-tag.outputs.full_sem_ver }}
          body: "Automated release based on the latest commit."
          draft: false
          prerelease: false      
